package com.cat.connect.repository.company;

import com.cat.connect.dto.company.Company;
import com.cat.connect.dto.company.CompanyRowMapper;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public class CompanyJdbcRepository {

    private final NamedParameterJdbcTemplate jdbc;
    private final CompanyRowMapper rowMapper = new CompanyRowMapper();

    public CompanyJdbcRepository(NamedParameterJdbcTemplate jdbc) {
        this.jdbc = jdbc;
    }

    public Company insert(Company c) {
        String sql = """
            INSERT INTO company (code, name) VALUES (:code, :name)
        """;
        MapSqlParameterSource params = new MapSqlParameterSource()
                .addValue("code", c.getCode().trim())
                .addValue("name", c.getName().trim());

        KeyHolder kh = new GeneratedKeyHolder();
        jdbc.update(sql, params, kh, new String[]{"id"});
        Number key = kh.getKey();
        c.setId(key != null ? key.longValue() : null);

        // fetch created_at (generated by DB default)
        return findById(c.getId()).orElseThrow();
    }

    public Optional<Company> findById(Long id) {
        String sql = "SELECT id, code, name, created_at FROM company WHERE id = :id";
        List<Company> list = jdbc.query(sql, new MapSqlParameterSource("id", id), rowMapper);
        return list.stream().findFirst();
    }

    public Optional<Company> findByCode(String code) {
        String sql = "SELECT id, code, name, created_at FROM company WHERE code = :code";
        List<Company> list = jdbc.query(sql, new MapSqlParameterSource("code", code), rowMapper);
        return list.stream().findFirst();
    }

    public List<Company> findPage(String q, int page, int size, String sort, String dir) {
        // whitelist sort columns to avoid SQL injection
        String sortCol = switch (sort) {
            case "id", "code", "name", "created_at" -> sort;
            default -> "id";
        };
        String direction = "desc".equalsIgnoreCase(dir) ? "DESC" : "ASC";

        String base = """
            SELECT id, code, name, created_at
              FROM company
             WHERE (:q IS NULL OR code LIKE :like OR name LIKE :like)
             ORDER BY %s %s
             LIMIT :limit OFFSET :offset
        """.formatted(sortCol, direction);

        MapSqlParameterSource p = new MapSqlParameterSource();
        p.addValue("q", (q == null || q.isBlank()) ? null : q);
        p.addValue("like", "%" + (q == null ? "" : q.trim()) + "%");
        p.addValue("limit", size);
        p.addValue("offset", page * size);

        return jdbc.query(base, p, rowMapper);
    }

    public int count(String q) {
        String sql = """
            SELECT COUNT(*) FROM company
             WHERE (:q IS NULL OR code LIKE :like OR name LIKE :like)
        """;
        MapSqlParameterSource p = new MapSqlParameterSource();
        p.addValue("q", (q == null || q.isBlank()) ? null : q);
        p.addValue("like", "%" + (q == null ? "" : q.trim()) + "%");
        Integer cnt = jdbc.queryForObject(sql, p, Integer.class);
        return cnt == null ? 0 : cnt;
    }

    public void updateName(Long id, String name) {
        String sql = "UPDATE company SET name = :name WHERE id = :id";
        jdbc.update(sql, new MapSqlParameterSource()
                .addValue("name", name.trim())
                .addValue("id", id));
    }

    public boolean existsById(Long id) {
        String sql = "SELECT 1 FROM company WHERE id = :id";
        List<Integer> ones = jdbc.query(sql, new MapSqlParameterSource("id", id),
                (rs, rn) -> rs.getInt(1));
        return !ones.isEmpty();
    }

    public void deleteById(Long id) {
        String sql = "DELETE FROM company WHERE id = :id";
        jdbc.update(sql, new MapSqlParameterSource("id", id));
    }
}
